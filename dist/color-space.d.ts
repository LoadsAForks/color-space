// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   dist/color-space.d.ts
//   mri
//   uvu/parse

export * from 'color-space/build/cmy';
export * from 'color-space/build/cmyk';
export * from 'color-space/build/coloroid';
export * from 'color-space/build/cubehelix';
export * from 'color-space/build/hcg';
export * from 'color-space/build/hcy';
export * from 'color-space/build/hpluv';
export * from 'color-space/build/hsi';
export * from 'color-space/build/hsl';
export * from 'color-space/build/hsluv';
export * from 'color-space/build/hsp';
export * from 'color-space/build/hsv';
export * from 'color-space/build/hwb';
export * from 'color-space/build/index';
export * from 'color-space/build/jpeg';
export * from 'color-space/build/lab';
export * from 'color-space/build/labh';
export * from 'color-space/build/lchab';
export * from 'color-space/build/lchuv';
export * from 'color-space/build/lms';
export * from 'color-space/build/luv';
export * from 'color-space/build/osaucs';
export * from 'color-space/build/rgb';
export * from 'color-space/build/tsl';
export * from 'color-space/build/ucs';
export * from 'color-space/build/uvw';
export * from 'color-space/build/xvycc';
export * from 'color-space/build/xyy';
export * from 'color-space/build/xyz';
export * from 'color-space/build/ycbcr';
export * from 'color-space/build/yccbccrc';
export * from 'color-space/build/ycgco';
export * from 'color-space/build/ydbdr';
export * from 'color-space/build/yes';
export * from 'color-space/build/yiq';
export * from 'color-space/build/ypbpr';
export * from 'color-space/build/yuv';
export * from 'color-space/dist/color-space';
export * from 'color-space/node_modules/dequal/index';
export * from 'color-space/node_modules/dequal/lite/index';
export * from 'color-space/node_modules/esbuild/lib/main';
export * from 'color-space/node_modules/kleur/colors';
export * from 'color-space/node_modules/kleur/index';
export * from 'color-space/node_modules/mri/index';
export * from 'color-space/node_modules/sade/index';
export * from 'color-space/node_modules/uvu/assert/index';
export * from 'color-space/node_modules/uvu/diff/index';
export * from 'color-space/node_modules/uvu/index';
export * from 'color-space/node_modules/uvu/parse/index';
export * from 'color-space/node_modules/uvu/run/index';

declare module 'color-space/build/cmy' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/cmyk' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/coloroid' {
    const _default: import("./index.js").ColorSpace & ColoroidSpecific;
    export default _default;
    export type ColoroidSpecific = {
        table: Array<Array<number>>;
    };
}

declare module 'color-space/build/cubehelix' {
    const _default: import("./index.js").ColorSpace & CubeHelixSpecific;
    export default _default;
    export type CubeHelixSpecific = {
        defaults: {
            start: number;
            rotation: number;
            hue: number;
            gamma: number;
        };
    };
}

declare module 'color-space/build/hcg' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/hcy' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/hpluv' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/hsi' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/hsl' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/hsluv' {
    export namespace _hsluv {
        export { Q as hsluvToRgb };
        export { H as hsluvToLch };
        export { R as rgbToHsluv };
        export { T as rgbToHpluv };
        export { u as rgbToXyz };
        export { P as rgbToLch };
        export { S as hpluvToRgb };
        export { J as hpluvToLch };
        export { K as lchToHpluv };
        export { I as lchToHsluv };
        export { G as lchToLuv };
        export { O as lchToRgb };
        export { F as luvToLch };
        export { E as luvToXyz };
        export { A as xyzToLuv };
        export { t as xyzToRgb };
    }
    const _default: import("./index.js").ColorSpace & HSLuvSpecific;
    export default _default;
    export type HSLuvSpecific = {
        _hsluv: {
            [x: string]: import("./index.js").Transform;
        };
    };
    function Q(a: any): number[];
    function H(a: any): any[];
    function R(a: any): any[];
    function T(a: any): any[];
    function u(a: any): number[];
    function P(a: any): any[];
    function S(a: any): number[];
    function J(a: any): any[];
    function K(a: any): any[];
    function I(a: any): any[];
    function G(a: any): any[];
    function O(a: any): number[];
    function F(a: any): any[];
    function E(a: any): any[];
    function A(a: any): any[];
    function t(a: any): number[];
}

declare module 'color-space/build/hsp' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/hsv' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/hwb' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/index' {
    /**
        * @param {ColorSpace} newSpace
        */
    export function register(newSpace: ColorSpace): void;
    export default spaces;
    export type SpaceId = "rgb" | "xyz" | "hsl" | "hsv" | "hsi" | "hwb" | "cmyk" | "cmy" | "xyy" | "yiq" | "yuv" | "ydbdr" | "ycgco" | "ypbpr" | "ycbcr" | "xvycc" | "yccbccrc" | "ucs" | "uvw" | "jpeg" | "lab" | "labh" | "lms" | "lchab" | "luv" | "lchuv" | "hsluv" | "hpluv" | "cubehelix" | "coloroid" | "hcg" | "hcy" | "tsl" | "yes" | "osaucs" | "hsp";
    export type Transform = (color: Array<number>, ...rest: Array<any>) => Array<number>;
    export type ColorSpaceTransforms = { [key in SpaceId]: Transform; };
    export type ColorSpaceBase = {
            name: SpaceId;
            min: Array<number>;
            max: Array<number>;
            channel: Array<string>;
            alias?: string[] | undefined;
    };
    export type ColorSpace = ColorSpaceBase & ColorSpaceTransforms;
    /** @typedef {ColorSpaceBase & ColorSpaceTransforms} ColorSpace */
    const spaces: { [key in SpaceId]: ColorSpace; };
}

declare module 'color-space/build/jpeg' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/lab' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/labh' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/lchab' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/lchuv' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/lms' {
    const _default: import("./index.js").ColorSpace & LMSSpecific;
    export default _default;
    export type LMSSpecific = {
        matrix: {
            [x: string]: Array<number>;
        };
    };
}

declare module 'color-space/build/luv' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/osaucs' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/rgb' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/tsl' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/ucs' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/uvw' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/xvycc' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/xyy' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/xyz' {
    const _default: import("./index.js").ColorSpace & XYZSpecific;
    export default _default;
    export type XYZSpecific = {
        whitepoint: {
            [x: number]: {
                [x: string]: Array<number>;
            };
        };
    };
}

declare module 'color-space/build/ycbcr' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/yccbccrc' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/ycgco' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/ydbdr' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/yes' {
    const _default: import("./index.js").ColorSpace;
    export default _default;
}

declare module 'color-space/build/yiq' {
    export default yiq;
    var yiq: import("./index.js").ColorSpace;
}

declare module 'color-space/build/ypbpr' {
    export default ypbpr;
    var ypbpr: import("./index.js").ColorSpace;
}

declare module 'color-space/build/yuv' {
    export default yuv;
    var yuv: import("./index.js").ColorSpace;
}

declare module 'color-space/dist/color-space' {
    
    export * from 'color-space/build/cmy';
    export * from 'color-space/build/cmyk';
    export * from 'color-space/build/coloroid';
    export * from 'color-space/build/cubehelix';
    export * from 'color-space/build/hcg';
    export * from 'color-space/build/hcy';
    export * from 'color-space/build/hpluv';
    export * from 'color-space/build/hsi';
    export * from 'color-space/build/hsl';
    export * from 'color-space/build/hsluv';
    export * from 'color-space/build/hsp';
    export * from 'color-space/build/hsv';
    export * from 'color-space/build/hwb';
    export * from 'color-space/build/index';
    export * from 'color-space/build/jpeg';
    export * from 'color-space/build/lab';
    export * from 'color-space/build/labh';
    export * from 'color-space/build/lchab';
    export * from 'color-space/build/lchuv';
    export * from 'color-space/build/lms';
    export * from 'color-space/build/luv';
    export * from 'color-space/build/osaucs';
    export * from 'color-space/build/rgb';
    export * from 'color-space/build/tsl';
    export * from 'color-space/build/ucs';
    export * from 'color-space/build/uvw';
    export * from 'color-space/build/xvycc';
    export * from 'color-space/build/xyy';
    export * from 'color-space/build/xyz';
    export * from 'color-space/build/ycbcr';
    export * from 'color-space/build/yccbccrc';
    export * from 'color-space/build/ycgco';
    export * from 'color-space/build/ydbdr';
    export * from 'color-space/build/yes';
    export * from 'color-space/build/yiq';
    export * from 'color-space/build/ypbpr';
    export * from 'color-space/build/yuv';
    export * from 'color-space/dist/color-space';
    export * from 'color-space/node_modules/dequal/index';
    export * from 'color-space/node_modules/dequal/lite/index';
    export * from 'color-space/node_modules/esbuild/lib/main';
    export * from 'color-space/node_modules/kleur/colors';
    export * from 'color-space/node_modules/kleur/index';
    export * from 'color-space/node_modules/mri/index';
    export * from 'color-space/node_modules/sade/index';
    export * from 'color-space/node_modules/uvu/assert/index';
    export * from 'color-space/node_modules/uvu/diff/index';
    export * from 'color-space/node_modules/uvu/index';
    export * from 'color-space/node_modules/uvu/parse/index';
    export * from 'color-space/node_modules/uvu/run/index';
    
    declare module 'color-space/build/cmy' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/cmyk' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/coloroid' {
        const _default: import("./index.js").ColorSpace & ColoroidSpecific;
        export default _default;
        export type ColoroidSpecific = {
            table: Array<Array<number>>;
        };
    }
    
    declare module 'color-space/build/cubehelix' {
        const _default: import("./index.js").ColorSpace & CubeHelixSpecific;
        export default _default;
        export type CubeHelixSpecific = {
            defaults: {
                start: number;
                rotation: number;
                hue: number;
                gamma: number;
            };
        };
    }
    
    declare module 'color-space/build/hcg' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/hcy' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/hpluv' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/hsi' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/hsl' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/hsluv' {
        export namespace _hsluv {
            export { Q as hsluvToRgb };
            export { H as hsluvToLch };
            export { R as rgbToHsluv };
            export { T as rgbToHpluv };
            export { u as rgbToXyz };
            export { P as rgbToLch };
            export { S as hpluvToRgb };
            export { J as hpluvToLch };
            export { K as lchToHpluv };
            export { I as lchToHsluv };
            export { G as lchToLuv };
            export { O as lchToRgb };
            export { F as luvToLch };
            export { E as luvToXyz };
            export { A as xyzToLuv };
            export { t as xyzToRgb };
        }
        const _default: import("./index.js").ColorSpace & HSLuvSpecific;
        export default _default;
        export type HSLuvSpecific = {
            _hsluv: {
                [x: string]: import("./index.js").Transform;
            };
        };
        function Q(a: any): number[];
        function H(a: any): any[];
        function R(a: any): any[];
        function T(a: any): any[];
        function u(a: any): number[];
        function P(a: any): any[];
        function S(a: any): number[];
        function J(a: any): any[];
        function K(a: any): any[];
        function I(a: any): any[];
        function G(a: any): any[];
        function O(a: any): number[];
        function F(a: any): any[];
        function E(a: any): any[];
        function A(a: any): any[];
        function t(a: any): number[];
    }
    
    declare module 'color-space/build/hsp' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/hsv' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/hwb' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/index' {
        /**
             * @param {ColorSpace} newSpace
             */
        export function register(newSpace: ColorSpace): void;
        export default spaces;
        export type SpaceId = "rgb" | "xyz" | "hsl" | "hsv" | "hsi" | "hwb" | "cmyk" | "cmy" | "xyy" | "yiq" | "yuv" | "ydbdr" | "ycgco" | "ypbpr" | "ycbcr" | "xvycc" | "yccbccrc" | "ucs" | "uvw" | "jpeg" | "lab" | "labh" | "lms" | "lchab" | "luv" | "lchuv" | "hsluv" | "hpluv" | "cubehelix" | "coloroid" | "hcg" | "hcy" | "tsl" | "yes" | "osaucs" | "hsp";
        export type Transform = (color: Array<number>, ...rest: Array<any>) => Array<number>;
        export type ColorSpaceTransforms = { [key in SpaceId]: Transform; };
        export type ColorSpaceBase = {
                name: SpaceId;
                min: Array<number>;
                max: Array<number>;
                channel: Array<string>;
                alias?: string[] | undefined;
        };
        export type ColorSpace = ColorSpaceBase & ColorSpaceTransforms;
        /** @typedef {ColorSpaceBase & ColorSpaceTransforms} ColorSpace */
        const spaces: { [key in SpaceId]: ColorSpace; };
    }
    
    declare module 'color-space/build/jpeg' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/lab' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/labh' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/lchab' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/lchuv' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/lms' {
        const _default: import("./index.js").ColorSpace & LMSSpecific;
        export default _default;
        export type LMSSpecific = {
            matrix: {
                [x: string]: Array<number>;
            };
        };
    }
    
    declare module 'color-space/build/luv' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/osaucs' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/rgb' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/tsl' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/ucs' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/uvw' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/xvycc' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/xyy' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/xyz' {
        const _default: import("./index.js").ColorSpace & XYZSpecific;
        export default _default;
        export type XYZSpecific = {
            whitepoint: {
                [x: number]: {
                    [x: string]: Array<number>;
                };
            };
        };
    }
    
    declare module 'color-space/build/ycbcr' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/yccbccrc' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/ycgco' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/ydbdr' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/yes' {
        const _default: import("./index.js").ColorSpace;
        export default _default;
    }
    
    declare module 'color-space/build/yiq' {
        export default yiq;
        var yiq: import("./index.js").ColorSpace;
    }
    
    declare module 'color-space/build/ypbpr' {
        export default ypbpr;
        var ypbpr: import("./index.js").ColorSpace;
    }
    
    declare module 'color-space/build/yuv' {
        export default yuv;
        var yuv: import("./index.js").ColorSpace;
    }
    
    declare module 'color-space/dist/color-space' {
        declare module "color-space/dts-bundle.tmp.color-space//rgb" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//hsl" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//hsv" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//hsi" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//hwb" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//cmyk" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//cmy" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//xyz" {
                const _default: import("index").ColorSpace & XYZSpecific;
                export default _default;
                export type XYZSpecific = {
                        whitepoint: {
                                [x: number]: {
                                        [x: string]: Array<number>;
                                };
                        };
                };
        }
        declare module "color-space/dts-bundle.tmp.color-space//xyy" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//yiq" {
                export default yiq;
                var yiq: import("index").ColorSpace;
        }
        declare module "color-space/dts-bundle.tmp.color-space//yuv" {
                export default yuv;
                var yuv: import("index").ColorSpace;
        }
        declare module "color-space/dts-bundle.tmp.color-space//ydbdr" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//ycgco" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//ypbpr" {
                export default ypbpr;
                var ypbpr: import("index").ColorSpace;
        }
        declare module "color-space/dts-bundle.tmp.color-space//ycbcr" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//xvycc" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//yccbccrc" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//ucs" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//uvw" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//jpeg" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//lab" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//labh" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//lms" {
                const _default: import("index").ColorSpace & LMSSpecific;
                export default _default;
                export type LMSSpecific = {
                        matrix: {
                                [x: string]: Array<number>;
                        };
                };
        }
        declare module "color-space/dts-bundle.tmp.color-space//lchab" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//luv" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//lchuv" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//hsluv" {
                export namespace _hsluv {
                        export { Q as hsluvToRgb };
                        export { H as hsluvToLch };
                        export { R as rgbToHsluv };
                        export { T as rgbToHpluv };
                        export { u as rgbToXyz };
                        export { P as rgbToLch };
                        export { S as hpluvToRgb };
                        export { J as hpluvToLch };
                        export { K as lchToHpluv };
                        export { I as lchToHsluv };
                        export { G as lchToLuv };
                        export { O as lchToRgb };
                        export { F as luvToLch };
                        export { E as luvToXyz };
                        export { A as xyzToLuv };
                        export { t as xyzToRgb };
                }
                const _default: import("index").ColorSpace & HSLuvSpecific;
                export default _default;
                export type HSLuvSpecific = {
                        _hsluv: {
                                [x: string]: import("index").Transform;
                        };
                };
                function Q(a: any): number[];
                function H(a: any): any[];
                function R(a: any): any[];
                function T(a: any): any[];
                function u(a: any): number[];
                function P(a: any): any[];
                function S(a: any): number[];
                function J(a: any): any[];
                function K(a: any): any[];
                function I(a: any): any[];
                function G(a: any): any[];
                function O(a: any): number[];
                function F(a: any): any[];
                function E(a: any): any[];
                function A(a: any): any[];
                function t(a: any): number[];
        }
        declare module "color-space/dts-bundle.tmp.color-space//hpluv" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//cubehelix" {
                const _default: import("index").ColorSpace & CubeHelixSpecific;
                export default _default;
                export type CubeHelixSpecific = {
                        defaults: {
                                start: number;
                                rotation: number;
                                hue: number;
                                gamma: number;
                        };
                };
        }
        declare module "color-space/dts-bundle.tmp.color-space//coloroid" {
                const _default: import("index").ColorSpace & ColoroidSpecific;
                export default _default;
                export type ColoroidSpecific = {
                        table: Array<Array<number>>;
                };
        }
        declare module "color-space/dts-bundle.tmp.color-space//hcg" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//hcy" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//tsl" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//yes" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//osaucs" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//hsp" {
                const _default: import("index").ColorSpace;
                export default _default;
        }
        declare module "color-space/dts-bundle.tmp.color-space//index" {
                /**
                     * @param {ColorSpace} newSpace
                     */
                export function register(newSpace: ColorSpace): void;
                export default spaces;
                export type SpaceId = "rgb" | "xyz" | "hsl" | "hsv" | "hsi" | "hwb" | "cmyk" | "cmy" | "xyy" | "yiq" | "yuv" | "ydbdr" | "ycgco" | "ypbpr" | "ycbcr" | "xvycc" | "yccbccrc" | "ucs" | "uvw" | "jpeg" | "lab" | "labh" | "lms" | "lchab" | "luv" | "lchuv" | "hsluv" | "hpluv" | "cubehelix" | "coloroid" | "hcg" | "hcy" | "tsl" | "yes" | "osaucs" | "hsp";
                export type Transform = (color: Array<number>, ...rest: Array<any>) => Array<number>;
                export type ColorSpaceTransforms = { [key in SpaceId]: Transform; };
                export type ColorSpaceBase = {
                        name: SpaceId;
                        min: Array<number>;
                        max: Array<number>;
                        channel: Array<string>;
                        alias?: string[] | undefined;
                };
                export type ColorSpace = ColorSpaceBase & ColorSpaceTransforms;
                /** @typedef {ColorSpaceBase & ColorSpaceTransforms} ColorSpace */
                const spaces: { [key in SpaceId]: ColorSpace; };
        }
    }
    
    declare module 'color-space/node_modules/dequal/index' {
        export function dequal(foo: any, bar: any): boolean;
    }
    
    declare module 'color-space/node_modules/dequal/lite/index' {
        export function dequal(foo: any, bar: any): boolean;
    }
    
    declare module 'color-space/node_modules/esbuild/lib/main' {
        export type Platform = 'browser' | 'node' | 'neutral'
        export type Format = 'iife' | 'cjs' | 'esm'
        export type Loader = 'base64' | 'binary' | 'copy' | 'css' | 'dataurl' | 'default' | 'empty' | 'file' | 'js' | 'json' | 'jsx' | 'local-css' | 'text' | 'ts' | 'tsx'
        export type LogLevel = 'verbose' | 'debug' | 'info' | 'warning' | 'error' | 'silent'
        export type Charset = 'ascii' | 'utf8'
        export type Drop = 'console' | 'debugger'
    
        interface CommonOptions {
            /** Documentation: https://esbuild.github.io/api/#sourcemap */
            sourcemap?: boolean | 'linked' | 'inline' | 'external' | 'both'
            /** Documentation: https://esbuild.github.io/api/#legal-comments */
            legalComments?: 'none' | 'inline' | 'eof' | 'linked' | 'external'
            /** Documentation: https://esbuild.github.io/api/#source-root */
            sourceRoot?: string
            /** Documentation: https://esbuild.github.io/api/#sources-content */
            sourcesContent?: boolean
    
            /** Documentation: https://esbuild.github.io/api/#format */
            format?: Format
            /** Documentation: https://esbuild.github.io/api/#global-name */
            globalName?: string
            /** Documentation: https://esbuild.github.io/api/#target */
            target?: string | string[]
            /** Documentation: https://esbuild.github.io/api/#supported */
            supported?: Record<string, boolean>
            /** Documentation: https://esbuild.github.io/api/#platform */
            platform?: Platform
    
            /** Documentation: https://esbuild.github.io/api/#mangle-props */
            mangleProps?: RegExp
            /** Documentation: https://esbuild.github.io/api/#mangle-props */
            reserveProps?: RegExp
            /** Documentation: https://esbuild.github.io/api/#mangle-props */
            mangleQuoted?: boolean
            /** Documentation: https://esbuild.github.io/api/#mangle-props */
            mangleCache?: Record<string, string | false>
            /** Documentation: https://esbuild.github.io/api/#drop */
            drop?: Drop[]
            /** Documentation: https://esbuild.github.io/api/#drop-labels */
            dropLabels?: string[]
            /** Documentation: https://esbuild.github.io/api/#minify */
            minify?: boolean
            /** Documentation: https://esbuild.github.io/api/#minify */
            minifyWhitespace?: boolean
            /** Documentation: https://esbuild.github.io/api/#minify */
            minifyIdentifiers?: boolean
            /** Documentation: https://esbuild.github.io/api/#minify */
            minifySyntax?: boolean
            /** Documentation: https://esbuild.github.io/api/#line-limit */
            lineLimit?: number
            /** Documentation: https://esbuild.github.io/api/#charset */
            charset?: Charset
            /** Documentation: https://esbuild.github.io/api/#tree-shaking */
            treeShaking?: boolean
            /** Documentation: https://esbuild.github.io/api/#ignore-annotations */
            ignoreAnnotations?: boolean
    
            /** Documentation: https://esbuild.github.io/api/#jsx */
            jsx?: 'transform' | 'preserve' | 'automatic'
            /** Documentation: https://esbuild.github.io/api/#jsx-factory */
            jsxFactory?: string
            /** Documentation: https://esbuild.github.io/api/#jsx-fragment */
            jsxFragment?: string
            /** Documentation: https://esbuild.github.io/api/#jsx-import-source */
            jsxImportSource?: string
            /** Documentation: https://esbuild.github.io/api/#jsx-development */
            jsxDev?: boolean
            /** Documentation: https://esbuild.github.io/api/#jsx-side-effects */
            jsxSideEffects?: boolean
    
            /** Documentation: https://esbuild.github.io/api/#define */
            define?: { [key: string]: string }
            /** Documentation: https://esbuild.github.io/api/#pure */
            pure?: string[]
            /** Documentation: https://esbuild.github.io/api/#keep-names */
            keepNames?: boolean
    
            /** Documentation: https://esbuild.github.io/api/#color */
            color?: boolean
            /** Documentation: https://esbuild.github.io/api/#log-level */
            logLevel?: LogLevel
            /** Documentation: https://esbuild.github.io/api/#log-limit */
            logLimit?: number
            /** Documentation: https://esbuild.github.io/api/#log-override */
            logOverride?: Record<string, LogLevel>
    
            /** Documentation: https://esbuild.github.io/api/#tsconfig-raw */
            tsconfigRaw?: string | TsconfigRaw
        }
    
        export interface TsconfigRaw {
            compilerOptions?: {
                alwaysStrict?: boolean
                baseUrl?: string
                experimentalDecorators?: boolean
                importsNotUsedAsValues?: 'remove' | 'preserve' | 'error'
                jsx?: 'preserve' | 'react-native' | 'react' | 'react-jsx' | 'react-jsxdev'
                jsxFactory?: string
                jsxFragmentFactory?: string
                jsxImportSource?: string
                paths?: Record<string, string[]>
                preserveValueImports?: boolean
                strict?: boolean
                target?: string
                useDefineForClassFields?: boolean
                verbatimModuleSyntax?: boolean
            }
        }
    
        export interface BuildOptions extends CommonOptions {
            /** Documentation: https://esbuild.github.io/api/#bundle */
            bundle?: boolean
            /** Documentation: https://esbuild.github.io/api/#splitting */
            splitting?: boolean
            /** Documentation: https://esbuild.github.io/api/#preserve-symlinks */
            preserveSymlinks?: boolean
            /** Documentation: https://esbuild.github.io/api/#outfile */
            outfile?: string
            /** Documentation: https://esbuild.github.io/api/#metafile */
            metafile?: boolean
            /** Documentation: https://esbuild.github.io/api/#outdir */
            outdir?: string
            /** Documentation: https://esbuild.github.io/api/#outbase */
            outbase?: string
            /** Documentation: https://esbuild.github.io/api/#external */
            external?: string[]
            /** Documentation: https://esbuild.github.io/api/#packages */
            packages?: 'bundle' | 'external'
            /** Documentation: https://esbuild.github.io/api/#alias */
            alias?: Record<string, string>
            /** Documentation: https://esbuild.github.io/api/#loader */
            loader?: { [ext: string]: Loader }
            /** Documentation: https://esbuild.github.io/api/#resolve-extensions */
            resolveExtensions?: string[]
            /** Documentation: https://esbuild.github.io/api/#main-fields */
            mainFields?: string[]
            /** Documentation: https://esbuild.github.io/api/#conditions */
            conditions?: string[]
            /** Documentation: https://esbuild.github.io/api/#write */
            write?: boolean
            /** Documentation: https://esbuild.github.io/api/#allow-overwrite */
            allowOverwrite?: boolean
            /** Documentation: https://esbuild.github.io/api/#tsconfig */
            tsconfig?: string
            /** Documentation: https://esbuild.github.io/api/#out-extension */
            outExtension?: { [ext: string]: string }
            /** Documentation: https://esbuild.github.io/api/#public-path */
            publicPath?: string
            /** Documentation: https://esbuild.github.io/api/#entry-names */
            entryNames?: string
            /** Documentation: https://esbuild.github.io/api/#chunk-names */
            chunkNames?: string
            /** Documentation: https://esbuild.github.io/api/#asset-names */
            assetNames?: string
            /** Documentation: https://esbuild.github.io/api/#inject */
            inject?: string[]
            /** Documentation: https://esbuild.github.io/api/#banner */
            banner?: { [type: string]: string }
            /** Documentation: https://esbuild.github.io/api/#footer */
            footer?: { [type: string]: string }
            /** Documentation: https://esbuild.github.io/api/#entry-points */
            entryPoints?: string[] | Record<string, string> | { in: string, out: string }[]
            /** Documentation: https://esbuild.github.io/api/#stdin */
            stdin?: StdinOptions
            /** Documentation: https://esbuild.github.io/plugins/ */
            plugins?: Plugin[]
            /** Documentation: https://esbuild.github.io/api/#working-directory */
            absWorkingDir?: string
            /** Documentation: https://esbuild.github.io/api/#node-paths */
            nodePaths?: string[]; // The "NODE_PATH" variable from Node.js
        }
    
        export interface StdinOptions {
            contents: string | Uint8Array
            resolveDir?: string
            sourcefile?: string
            loader?: Loader
        }
    
        export interface Message {
            id: string
            pluginName: string
            text: string
            location: Location | null
            notes: Note[]
    
            /**
                 * Optional user-specified data that is passed through unmodified. You can
                 * use this to stash the original error, for example.
                 */
            detail: any
        }
    
        export interface Note {
            text: string
            location: Location | null
        }
    
        export interface Location {
            file: string
            namespace: string
            /** 1-based */
            line: number
            /** 0-based, in bytes */
            column: number
            /** in bytes */
            length: number
            lineText: string
            suggestion: string
        }
    
        export interface OutputFile {
            path: string
            contents: Uint8Array
            hash: string
            /** "contents" as text (changes automatically with "contents") */
            readonly text: string
        }
    
        export interface BuildResult<ProvidedOptions extends BuildOptions = BuildOptions> {
            errors: Message[]
            warnings: Message[]
            /** Only when "write: false" */
            outputFiles: OutputFile[] | (ProvidedOptions['write'] extends false ? never : undefined)
            /** Only when "metafile: true" */
            metafile: Metafile | (ProvidedOptions['metafile'] extends true ? never : undefined)
            /** Only when "mangleCache" is present */
            mangleCache: Record<string, string | false> | (ProvidedOptions['mangleCache'] extends Object ? never : undefined)
        }
    
        export interface BuildFailure extends Error {
            errors: Message[]
            warnings: Message[]
        }
    
        /** Documentation: https://esbuild.github.io/api/#serve-arguments */
        export interface ServeOptions {
            port?: number
            host?: string
            servedir?: string
            keyfile?: string
            certfile?: string
            fallback?: string
            onRequest?: (args: ServeOnRequestArgs) => void
        }
    
        export interface ServeOnRequestArgs {
            remoteAddress: string
            method: string
            path: string
            status: number
            /** The time to generate the response, not to send it */
            timeInMS: number
        }
    
        /** Documentation: https://esbuild.github.io/api/#serve-return-values */
        export interface ServeResult {
            port: number
            host: string
        }
    
        export interface TransformOptions extends CommonOptions {
            /** Documentation: https://esbuild.github.io/api/#sourcefile */
            sourcefile?: string
            /** Documentation: https://esbuild.github.io/api/#loader */
            loader?: Loader
            /** Documentation: https://esbuild.github.io/api/#banner */
            banner?: string
            /** Documentation: https://esbuild.github.io/api/#footer */
            footer?: string
        }
    
        export interface TransformResult<ProvidedOptions extends TransformOptions = TransformOptions> {
            code: string
            map: string
            warnings: Message[]
            /** Only when "mangleCache" is present */
            mangleCache: Record<string, string | false> | (ProvidedOptions['mangleCache'] extends Object ? never : undefined)
            /** Only when "legalComments" is "external" */
            legalComments: string | (ProvidedOptions['legalComments'] extends 'external' ? never : undefined)
        }
    
        export interface TransformFailure extends Error {
            errors: Message[]
            warnings: Message[]
        }
    
        export interface Plugin {
            name: string
            setup: (build: PluginBuild) => (void | Promise<void>)
        }
    
        export interface PluginBuild {
            /** Documentation: https://esbuild.github.io/plugins/#build-options */
            initialOptions: BuildOptions
    
            /** Documentation: https://esbuild.github.io/plugins/#resolve */
            resolve(path: string, options?: ResolveOptions): Promise<ResolveResult>
    
            /** Documentation: https://esbuild.github.io/plugins/#on-start */
            onStart(callback: () =>
                (OnStartResult | null | void | Promise<OnStartResult | null | void>)): void
    
            /** Documentation: https://esbuild.github.io/plugins/#on-end */
            onEnd(callback: (result: BuildResult) =>
                (OnEndResult | null | void | Promise<OnEndResult | null | void>)): void
    
            /** Documentation: https://esbuild.github.io/plugins/#on-resolve */
            onResolve(options: OnResolveOptions, callback: (args: OnResolveArgs) =>
                (OnResolveResult | null | undefined | Promise<OnResolveResult | null | undefined>)): void
    
            /** Documentation: https://esbuild.github.io/plugins/#on-load */
            onLoad(options: OnLoadOptions, callback: (args: OnLoadArgs) =>
                (OnLoadResult | null | undefined | Promise<OnLoadResult | null | undefined>)): void
    
            /** Documentation: https://esbuild.github.io/plugins/#on-dispose */
            onDispose(callback: () => void): void
    
            // This is a full copy of the esbuild library in case you need it
            esbuild: {
                context: typeof context,
                build: typeof build,
                buildSync: typeof buildSync,
                transform: typeof transform,
                transformSync: typeof transformSync,
                formatMessages: typeof formatMessages,
                formatMessagesSync: typeof formatMessagesSync,
                analyzeMetafile: typeof analyzeMetafile,
                analyzeMetafileSync: typeof analyzeMetafileSync,
                initialize: typeof initialize,
                version: typeof version,
            }
        }
    
        /** Documentation: https://esbuild.github.io/plugins/#resolve-options */
        export interface ResolveOptions {
            pluginName?: string
            importer?: string
            namespace?: string
            resolveDir?: string
            kind?: ImportKind
            pluginData?: any
            with?: Record<string, string>
        }
    
        /** Documentation: https://esbuild.github.io/plugins/#resolve-results */
        export interface ResolveResult {
            errors: Message[]
            warnings: Message[]
    
            path: string
            external: boolean
            sideEffects: boolean
            namespace: string
            suffix: string
            pluginData: any
        }
    
        export interface OnStartResult {
            errors?: PartialMessage[]
            warnings?: PartialMessage[]
        }
    
        export interface OnEndResult {
            errors?: PartialMessage[]
            warnings?: PartialMessage[]
        }
    
        /** Documentation: https://esbuild.github.io/plugins/#on-resolve-options */
        export interface OnResolveOptions {
            filter: RegExp
            namespace?: string
        }
    
        /** Documentation: https://esbuild.github.io/plugins/#on-resolve-arguments */
        export interface OnResolveArgs {
            path: string
            importer: string
            namespace: string
            resolveDir: string
            kind: ImportKind
            pluginData: any
            with: Record<string, string>
        }
    
        export type ImportKind =
            | 'entry-point'
    
            // JS
            | 'import-statement'
            | 'require-call'
            | 'dynamic-import'
            | 'require-resolve'
    
            // CSS
            | 'import-rule'
            | 'composes-from'
            | 'url-token'
    
        /** Documentation: https://esbuild.github.io/plugins/#on-resolve-results */
        export interface OnResolveResult {
            pluginName?: string
    
            errors?: PartialMessage[]
            warnings?: PartialMessage[]
    
            path?: string
            external?: boolean
            sideEffects?: boolean
            namespace?: string
            suffix?: string
            pluginData?: any
    
            watchFiles?: string[]
            watchDirs?: string[]
        }
    
        /** Documentation: https://esbuild.github.io/plugins/#on-load-options */
        export interface OnLoadOptions {
            filter: RegExp
            namespace?: string
        }
    
        /** Documentation: https://esbuild.github.io/plugins/#on-load-arguments */
        export interface OnLoadArgs {
            path: string
            namespace: string
            suffix: string
            pluginData: any
            with: Record<string, string>
        }
    
        /** Documentation: https://esbuild.github.io/plugins/#on-load-results */
        export interface OnLoadResult {
            pluginName?: string
    
            errors?: PartialMessage[]
            warnings?: PartialMessage[]
    
            contents?: string | Uint8Array
            resolveDir?: string
            loader?: Loader
            pluginData?: any
    
            watchFiles?: string[]
            watchDirs?: string[]
        }
    
        export interface PartialMessage {
            id?: string
            pluginName?: string
            text?: string
            location?: Partial<Location> | null
            notes?: PartialNote[]
            detail?: any
        }
    
        export interface PartialNote {
            text?: string
            location?: Partial<Location> | null
        }
    
        /** Documentation: https://esbuild.github.io/api/#metafile */
        export interface Metafile {
            inputs: {
                [path: string]: {
                    bytes: number
                    imports: {
                        path: string
                        kind: ImportKind
                        external?: boolean
                        original?: string
                        with?: Record<string, string>
                    }[]
                    format?: 'cjs' | 'esm'
                    with?: Record<string, string>
                }
            }
            outputs: {
                [path: string]: {
                    bytes: number
                    inputs: {
                        [path: string]: {
                            bytesInOutput: number
                        }
                    }
                    imports: {
                        path: string
                        kind: ImportKind | 'file-loader'
                        external?: boolean
                    }[]
                    exports: string[]
                    entryPoint?: string
                    cssBundle?: string
                }
            }
        }
    
        export interface FormatMessagesOptions {
            kind: 'error' | 'warning'
            color?: boolean
            terminalWidth?: number
        }
    
        export interface AnalyzeMetafileOptions {
            color?: boolean
            verbose?: boolean
        }
    
        export interface WatchOptions {
        }
    
        export interface BuildContext<ProvidedOptions extends BuildOptions = BuildOptions> {
            /** Documentation: https://esbuild.github.io/api/#rebuild */
            rebuild(): Promise<BuildResult<ProvidedOptions>>
    
            /** Documentation: https://esbuild.github.io/api/#watch */
            watch(options?: WatchOptions): Promise<void>
    
            /** Documentation: https://esbuild.github.io/api/#serve */
            serve(options?: ServeOptions): Promise<ServeResult>
    
            cancel(): Promise<void>
            dispose(): Promise<void>
        }
    
        type SameShape<Out, In extends Out> = In & { [Key in Exclude<keyof In, keyof Out>]: never }
    
        /**
             * This function invokes the "esbuild" command-line tool for you. It returns a
             * promise that either resolves with a "BuildResult" object or rejects with a
             * "BuildFailure" object.
             *
             * - Works in node: yes
             * - Works in browser: yes
             *
             * Documentation: https://esbuild.github.io/api/#build
             */
        export function build<T extends BuildOptions>(options: SameShape<BuildOptions, T>): Promise<BuildResult<T>>
    
        /**
             * This is the advanced long-running form of "build" that supports additional
             * features such as watch mode and a local development server.
             *
             * - Works in node: yes
             * - Works in browser: no
             *
             * Documentation: https://esbuild.github.io/api/#build
             */
        export function context<T extends BuildOptions>(options: SameShape<BuildOptions, T>): Promise<BuildContext<T>>
    
        /**
             * This function transforms a single JavaScript file. It can be used to minify
             * JavaScript, convert TypeScript/JSX to JavaScript, or convert newer JavaScript
             * to older JavaScript. It returns a promise that is either resolved with a
             * "TransformResult" object or rejected with a "TransformFailure" object.
             *
             * - Works in node: yes
             * - Works in browser: yes
             *
             * Documentation: https://esbuild.github.io/api/#transform
             */
        export function transform<T extends TransformOptions>(input: string | Uint8Array, options?: SameShape<TransformOptions, T>): Promise<TransformResult<T>>
    
        /**
             * Converts log messages to formatted message strings suitable for printing in
             * the terminal. This allows you to reuse the built-in behavior of esbuild's
             * log message formatter. This is a batch-oriented API for efficiency.
             *
             * - Works in node: yes
             * - Works in browser: yes
             */
        export function formatMessages(messages: PartialMessage[], options: FormatMessagesOptions): Promise<string[]>
    
        /**
             * Pretty-prints an analysis of the metafile JSON to a string. This is just for
             * convenience to be able to match esbuild's pretty-printing exactly. If you want
             * to customize it, you can just inspect the data in the metafile yourself.
             *
             * - Works in node: yes
             * - Works in browser: yes
             *
             * Documentation: https://esbuild.github.io/api/#analyze
             */
        export function analyzeMetafile(metafile: Metafile | string, options?: AnalyzeMetafileOptions): Promise<string>
    
        /**
             * A synchronous version of "build".
             *
             * - Works in node: yes
             * - Works in browser: no
             *
             * Documentation: https://esbuild.github.io/api/#build
             */
        export function buildSync<T extends BuildOptions>(options: SameShape<BuildOptions, T>): BuildResult<T>
    
        /**
             * A synchronous version of "transform".
             *
             * - Works in node: yes
             * - Works in browser: no
             *
             * Documentation: https://esbuild.github.io/api/#transform
             */
        export function transformSync<T extends TransformOptions>(input: string | Uint8Array, options?: SameShape<TransformOptions, T>): TransformResult<T>
    
        /**
             * A synchronous version of "formatMessages".
             *
             * - Works in node: yes
             * - Works in browser: no
             */
        export function formatMessagesSync(messages: PartialMessage[], options: FormatMessagesOptions): string[]
    
        /**
             * A synchronous version of "analyzeMetafile".
             *
             * - Works in node: yes
             * - Works in browser: no
             *
             * Documentation: https://esbuild.github.io/api/#analyze
             */
        export function analyzeMetafileSync(metafile: Metafile | string, options?: AnalyzeMetafileOptions): string
    
        /**
             * This configures the browser-based version of esbuild. It is necessary to
             * call this first and wait for the returned promise to be resolved before
             * making other API calls when using esbuild in the browser.
             *
             * - Works in node: yes
             * - Works in browser: yes ("options" is required)
             *
             * Documentation: https://esbuild.github.io/api/#browser
             */
        export function initialize(options: InitializeOptions): Promise<void>
    
        export interface InitializeOptions {
            /**
                 * The URL of the "esbuild.wasm" file. This must be provided when running
                 * esbuild in the browser.
                 */
            wasmURL?: string | URL
    
            /**
                 * The result of calling "new WebAssembly.Module(buffer)" where "buffer"
                 * is a typed array or ArrayBuffer containing the binary code of the
                 * "esbuild.wasm" file.
                 *
                 * You can use this as an alternative to "wasmURL" for environments where it's
                 * not possible to download the WebAssembly module.
                 */
            wasmModule?: WebAssembly.Module
    
            /**
                 * By default esbuild runs the WebAssembly-based browser API in a web worker
                 * to avoid blocking the UI thread. This can be disabled by setting "worker"
                 * to false.
                 */
            worker?: boolean
        }
    
        export let version: string
    
        export function stop(): Promise<void>
    
        global {
            namespace WebAssembly {
                interface Module {
                }
            }
            interface URL {
            }
        }
    }
    
    declare module 'color-space/node_modules/kleur/colors' {
        function print(input: string | boolean | number): string;
        function print(input: undefined | void): undefined;
        function print(input: null): null;
        type Colorize = typeof print;
    
        export const $: { enabled: boolean };
    
        export const black: Colorize;
        export const red: Colorize;
        export const green: Colorize;
        export const yellow: Colorize;
        export const blue: Colorize;
        export const magenta: Colorize;
        export const cyan: Colorize;
        export const white: Colorize;
        export const gray: Colorize;
        export const grey: Colorize;
    
        export const bgBlack: Colorize;
        export const bgRed: Colorize;
        export const bgGreen: Colorize;
        export const bgYellow: Colorize;
        export const bgBlue: Colorize;
        export const bgMagenta: Colorize;
        export const bgCyan: Colorize;
        export const bgWhite: Colorize;
    
        export const reset: Colorize;
        export const bold: Colorize;
        export const dim: Colorize;
        export const italic: Colorize;
        export const underline: Colorize;
        export const inverse: Colorize;
        export const hidden: Colorize;
        export const strikethrough: Colorize;
    }
    
    declare module 'color-space/node_modules/kleur/index' {
        namespace kleur {
            interface Color {
                (x: string | number): string;
                (): Kleur;
            }
    
            interface Kleur {
                // Colors
                black: Color;
                red: Color;
                green: Color;
                yellow: Color;
                blue: Color;
                magenta: Color;
                cyan: Color;
                white: Color;
                gray: Color;
                grey: Color;
    
                // Backgrounds
                bgBlack: Color;
                bgRed: Color;
                bgGreen: Color;
                bgYellow: Color;
                bgBlue: Color;
                bgMagenta: Color;
                bgCyan: Color;
                bgWhite: Color;
    
                // Modifiers
                reset: Color;
                bold: Color;
                dim: Color;
                italic: Color;
                underline: Color;
                inverse: Color;
                hidden: Color;
                strikethrough: Color;
            }
        }
    
        let kleur: kleur.Kleur & { enabled: boolean };
        export = kleur;
    }
    
    declare module 'color-space/node_modules/mri/index' {
        type Dict<T> = Record<string, T>;
        type Arrayable<T> = T | T[];
        type Default = Dict<any>;
    
        function mri<T=Default>(args?: string[], options?: mri.Options): mri.Argv<T>;
    
        namespace mri {
            export interface Options {
                boolean?: Arrayable<string>;
                string?: Arrayable<string>;
                alias?: Dict<Arrayable<string>>;
                default?: Dict<any>;
                unknown?(flag: string): void;
            }
    
            export type Argv<T=Default> = T & {
                _: string[];
            }
        }
    
        export = mri;
    }
    
    declare module 'color-space/node_modules/sade/index' {
        import type * as mri from 'mri';
    
        type Arrayable<T> = T | T[];
    
        function sade(usage: string, isSingle?: boolean): sade.Sade;
    
        namespace sade {
            export type Handler = (...args: any[]) => any;
            export type Value = number | string | boolean | null;
    
            export interface LazyOutput {
                name: string;
                handler: Handler;
                args: string[];
            }
    
            export interface Sade {
                command(usage: string, description?: string, options?: {
                    alias?: Arrayable<string>;
                    default?: boolean;
                }): Sade;
    
                option(flag: string, description?: string, value?: Value): Sade;
                action(handler: Handler): Sade;
                describe(text: Arrayable<string>): Sade;
                alias(...names: string[]): Sade;
                example(usage: string): Sade;
    
                parse(arr: string[], opts: { lazy: true } & mri.Options): LazyOutput;
                parse(arr: string[], opts?: { lazy?: boolean } & mri.Options): void;
    
                version(value: string): Sade;
                help(cmd?: string): void;
            }
        }
    
        export = sade;
    }
    
    declare module 'color-space/node_modules/uvu/assert/index' {
        type Types = 'string' | 'number' | 'boolean' | 'object' | 'undefined' | 'function';
    
        export type Message = string | Error;
        export function ok(actual: any, msg?: Message): asserts actual;
        export function is(actual: any, expects: any, msg?: Message): void;
        export function equal(actual: any, expects: any, msg?: Message): void;
        export function type(actual: any, expects: Types, msg?: Message): void;
        export function instance(actual: any, expects: any, msg?: Message): void;
        export function snapshot(actual: string, expects: string, msg?: Message): void;
        export function fixture(actual: string, expects: string, msg?: Message): void;
        export function match(actual: string, expects: string | RegExp, msg?: Message): void;
        export function throws(fn: Function, expects?: Message | RegExp | Function, msg?: Message): void;
        export function not(actual: any, msg?: Message): void;
        export function unreachable(msg?: Message): void;
    
        export namespace is {
            function not(actual: any, expects: any, msg?: Message): void;
        }
    
        export namespace not {
            function ok(actual: any, msg?: Message): void;
            function equal(actual: any, expects: any, msg?: Message): void;
            function type(actual: any, expects: Types, msg?: Message): void;
            function instance(actual: any, expects: any, msg?: Message): void;
            function snapshot(actual: string, expects: string, msg?: Message): void;
            function fixture(actual: string, expects: string, msg?: Message): void;
            function match(actual: string, expects: string | RegExp, msg?: Message): void;
            function throws(fn: Function, expects?: Message | RegExp | Function, msg?: Message): void;
        }
    
        export class Assertion extends Error {
            name: 'Assertion';
            code: 'ERR_ASSERTION';
            details: false | string;
            generated: boolean;
            operator: string;
            expects: any;
            actual: any;
            constructor(options?: {
                message: string;
                details?: string;
                generated?: boolean;
                operator: string;
                expects: any;
                actual: any;
            });
        }
    }
    
    declare module 'color-space/node_modules/uvu/diff/index' {
        export function chars(input: any, expects: any): string;
        export function lines(input: any, expects: any, linenum?: number): string;
        export function direct(input: any, expects: any, lenA?: number, lenB?: number): string;
        export function compare(input: any, expects: any): string;
        export function arrays(input: any, expects: any): string;
    }
    
    declare module 'color-space/node_modules/uvu/index' {
        namespace uvu {
            type Crumbs = { __suite__: string; __test__: string };
            type Callback<T> = (context: T & Crumbs) => Promise<void> | void;
    
            interface Hook<T> {
                (hook: Callback<T>): void;
                each(hook: Callback<T>): void;
            }
    
            interface Test<T> {
                (name: string, test: Callback<T>): void;
                only(name: string, test: Callback<T>): void;
                skip(name?: string, test?: Callback<T>): void;
                before: Hook<T>;
                after: Hook<T>
                run(): () => void;
            }
        }
    
        type Context = Record<string, any>;
    
        export type Test<T=Context> = uvu.Test<T>;
        export type Callback<T=Context> = uvu.Callback<T>;
    
        export const test: uvu.Test<Context>;
        export function suite<T=Context>(title?: string, context?: T): uvu.Test<T>;
        export function exec(bail?: boolean): Promise<void>;
    }
    
    declare module 'color-space/node_modules/uvu/parse/index' {
        type Arrayable<T> = T[] | T;
    
        export interface Suite {
            /** The relative file path */
            name: string;
            /** The absolute file path */
            file: string;
        }
    
        export interface Options {
            cwd: string;
            require: Arrayable<string>;
            ignore: Arrayable<string | RegExp>;
        }
    
        export interface Argv {
            dir: string;
            suites: Suite[];
            requires: boolean;
        }
    
        export function parse(dir?: string, pattern?: string|RegExp, opts?: Partial<Options>): Promise<Argv>;
    }
    
    declare module 'color-space/node_modules/uvu/run/index' {
        import type { Suite } from 'uvu/parse';
        export function run(suites: Suite[], options?: { bail: boolean }): Promise<void>;
    }
}

declare module 'color-space/node_modules/dequal/index' {
    export function dequal(foo: any, bar: any): boolean;
}

declare module 'color-space/node_modules/dequal/lite/index' {
    export function dequal(foo: any, bar: any): boolean;
}

declare module 'color-space/node_modules/esbuild/lib/main' {
    export type Platform = 'browser' | 'node' | 'neutral'
    export type Format = 'iife' | 'cjs' | 'esm'
    export type Loader = 'base64' | 'binary' | 'copy' | 'css' | 'dataurl' | 'default' | 'empty' | 'file' | 'js' | 'json' | 'jsx' | 'local-css' | 'text' | 'ts' | 'tsx'
    export type LogLevel = 'verbose' | 'debug' | 'info' | 'warning' | 'error' | 'silent'
    export type Charset = 'ascii' | 'utf8'
    export type Drop = 'console' | 'debugger'
    
    interface CommonOptions {
        /** Documentation: https://esbuild.github.io/api/#sourcemap */
        sourcemap?: boolean | 'linked' | 'inline' | 'external' | 'both'
        /** Documentation: https://esbuild.github.io/api/#legal-comments */
        legalComments?: 'none' | 'inline' | 'eof' | 'linked' | 'external'
        /** Documentation: https://esbuild.github.io/api/#source-root */
        sourceRoot?: string
        /** Documentation: https://esbuild.github.io/api/#sources-content */
        sourcesContent?: boolean
    
        /** Documentation: https://esbuild.github.io/api/#format */
        format?: Format
        /** Documentation: https://esbuild.github.io/api/#global-name */
        globalName?: string
        /** Documentation: https://esbuild.github.io/api/#target */
        target?: string | string[]
        /** Documentation: https://esbuild.github.io/api/#supported */
        supported?: Record<string, boolean>
        /** Documentation: https://esbuild.github.io/api/#platform */
        platform?: Platform
    
        /** Documentation: https://esbuild.github.io/api/#mangle-props */
        mangleProps?: RegExp
        /** Documentation: https://esbuild.github.io/api/#mangle-props */
        reserveProps?: RegExp
        /** Documentation: https://esbuild.github.io/api/#mangle-props */
        mangleQuoted?: boolean
        /** Documentation: https://esbuild.github.io/api/#mangle-props */
        mangleCache?: Record<string, string | false>
        /** Documentation: https://esbuild.github.io/api/#drop */
        drop?: Drop[]
        /** Documentation: https://esbuild.github.io/api/#drop-labels */
        dropLabels?: string[]
        /** Documentation: https://esbuild.github.io/api/#minify */
        minify?: boolean
        /** Documentation: https://esbuild.github.io/api/#minify */
        minifyWhitespace?: boolean
        /** Documentation: https://esbuild.github.io/api/#minify */
        minifyIdentifiers?: boolean
        /** Documentation: https://esbuild.github.io/api/#minify */
        minifySyntax?: boolean
        /** Documentation: https://esbuild.github.io/api/#line-limit */
        lineLimit?: number
        /** Documentation: https://esbuild.github.io/api/#charset */
        charset?: Charset
        /** Documentation: https://esbuild.github.io/api/#tree-shaking */
        treeShaking?: boolean
        /** Documentation: https://esbuild.github.io/api/#ignore-annotations */
        ignoreAnnotations?: boolean
    
        /** Documentation: https://esbuild.github.io/api/#jsx */
        jsx?: 'transform' | 'preserve' | 'automatic'
        /** Documentation: https://esbuild.github.io/api/#jsx-factory */
        jsxFactory?: string
        /** Documentation: https://esbuild.github.io/api/#jsx-fragment */
        jsxFragment?: string
        /** Documentation: https://esbuild.github.io/api/#jsx-import-source */
        jsxImportSource?: string
        /** Documentation: https://esbuild.github.io/api/#jsx-development */
        jsxDev?: boolean
        /** Documentation: https://esbuild.github.io/api/#jsx-side-effects */
        jsxSideEffects?: boolean
    
        /** Documentation: https://esbuild.github.io/api/#define */
        define?: { [key: string]: string }
        /** Documentation: https://esbuild.github.io/api/#pure */
        pure?: string[]
        /** Documentation: https://esbuild.github.io/api/#keep-names */
        keepNames?: boolean
    
        /** Documentation: https://esbuild.github.io/api/#color */
        color?: boolean
        /** Documentation: https://esbuild.github.io/api/#log-level */
        logLevel?: LogLevel
        /** Documentation: https://esbuild.github.io/api/#log-limit */
        logLimit?: number
        /** Documentation: https://esbuild.github.io/api/#log-override */
        logOverride?: Record<string, LogLevel>
    
        /** Documentation: https://esbuild.github.io/api/#tsconfig-raw */
        tsconfigRaw?: string | TsconfigRaw
    }
    
    export interface TsconfigRaw {
        compilerOptions?: {
            alwaysStrict?: boolean
            baseUrl?: string
            experimentalDecorators?: boolean
            importsNotUsedAsValues?: 'remove' | 'preserve' | 'error'
            jsx?: 'preserve' | 'react-native' | 'react' | 'react-jsx' | 'react-jsxdev'
            jsxFactory?: string
            jsxFragmentFactory?: string
            jsxImportSource?: string
            paths?: Record<string, string[]>
            preserveValueImports?: boolean
            strict?: boolean
            target?: string
            useDefineForClassFields?: boolean
            verbatimModuleSyntax?: boolean
        }
    }
    
    export interface BuildOptions extends CommonOptions {
        /** Documentation: https://esbuild.github.io/api/#bundle */
        bundle?: boolean
        /** Documentation: https://esbuild.github.io/api/#splitting */
        splitting?: boolean
        /** Documentation: https://esbuild.github.io/api/#preserve-symlinks */
        preserveSymlinks?: boolean
        /** Documentation: https://esbuild.github.io/api/#outfile */
        outfile?: string
        /** Documentation: https://esbuild.github.io/api/#metafile */
        metafile?: boolean
        /** Documentation: https://esbuild.github.io/api/#outdir */
        outdir?: string
        /** Documentation: https://esbuild.github.io/api/#outbase */
        outbase?: string
        /** Documentation: https://esbuild.github.io/api/#external */
        external?: string[]
        /** Documentation: https://esbuild.github.io/api/#packages */
        packages?: 'bundle' | 'external'
        /** Documentation: https://esbuild.github.io/api/#alias */
        alias?: Record<string, string>
        /** Documentation: https://esbuild.github.io/api/#loader */
        loader?: { [ext: string]: Loader }
        /** Documentation: https://esbuild.github.io/api/#resolve-extensions */
        resolveExtensions?: string[]
        /** Documentation: https://esbuild.github.io/api/#main-fields */
        mainFields?: string[]
        /** Documentation: https://esbuild.github.io/api/#conditions */
        conditions?: string[]
        /** Documentation: https://esbuild.github.io/api/#write */
        write?: boolean
        /** Documentation: https://esbuild.github.io/api/#allow-overwrite */
        allowOverwrite?: boolean
        /** Documentation: https://esbuild.github.io/api/#tsconfig */
        tsconfig?: string
        /** Documentation: https://esbuild.github.io/api/#out-extension */
        outExtension?: { [ext: string]: string }
        /** Documentation: https://esbuild.github.io/api/#public-path */
        publicPath?: string
        /** Documentation: https://esbuild.github.io/api/#entry-names */
        entryNames?: string
        /** Documentation: https://esbuild.github.io/api/#chunk-names */
        chunkNames?: string
        /** Documentation: https://esbuild.github.io/api/#asset-names */
        assetNames?: string
        /** Documentation: https://esbuild.github.io/api/#inject */
        inject?: string[]
        /** Documentation: https://esbuild.github.io/api/#banner */
        banner?: { [type: string]: string }
        /** Documentation: https://esbuild.github.io/api/#footer */
        footer?: { [type: string]: string }
        /** Documentation: https://esbuild.github.io/api/#entry-points */
        entryPoints?: string[] | Record<string, string> | { in: string, out: string }[]
        /** Documentation: https://esbuild.github.io/api/#stdin */
        stdin?: StdinOptions
        /** Documentation: https://esbuild.github.io/plugins/ */
        plugins?: Plugin[]
        /** Documentation: https://esbuild.github.io/api/#working-directory */
        absWorkingDir?: string
        /** Documentation: https://esbuild.github.io/api/#node-paths */
        nodePaths?: string[]; // The "NODE_PATH" variable from Node.js
    }
    
    export interface StdinOptions {
        contents: string | Uint8Array
        resolveDir?: string
        sourcefile?: string
        loader?: Loader
    }
    
    export interface Message {
        id: string
        pluginName: string
        text: string
        location: Location | null
        notes: Note[]
    
        /**
            * Optional user-specified data that is passed through unmodified. You can
            * use this to stash the original error, for example.
            */
        detail: any
    }
    
    export interface Note {
        text: string
        location: Location | null
    }
    
    export interface Location {
        file: string
        namespace: string
        /** 1-based */
        line: number
        /** 0-based, in bytes */
        column: number
        /** in bytes */
        length: number
        lineText: string
        suggestion: string
    }
    
    export interface OutputFile {
        path: string
        contents: Uint8Array
        hash: string
        /** "contents" as text (changes automatically with "contents") */
        readonly text: string
    }
    
    export interface BuildResult<ProvidedOptions extends BuildOptions = BuildOptions> {
        errors: Message[]
        warnings: Message[]
        /** Only when "write: false" */
        outputFiles: OutputFile[] | (ProvidedOptions['write'] extends false ? never : undefined)
        /** Only when "metafile: true" */
        metafile: Metafile | (ProvidedOptions['metafile'] extends true ? never : undefined)
        /** Only when "mangleCache" is present */
        mangleCache: Record<string, string | false> | (ProvidedOptions['mangleCache'] extends Object ? never : undefined)
    }
    
    export interface BuildFailure extends Error {
        errors: Message[]
        warnings: Message[]
    }
    
    /** Documentation: https://esbuild.github.io/api/#serve-arguments */
    export interface ServeOptions {
        port?: number
        host?: string
        servedir?: string
        keyfile?: string
        certfile?: string
        fallback?: string
        onRequest?: (args: ServeOnRequestArgs) => void
    }
    
    export interface ServeOnRequestArgs {
        remoteAddress: string
        method: string
        path: string
        status: number
        /** The time to generate the response, not to send it */
        timeInMS: number
    }
    
    /** Documentation: https://esbuild.github.io/api/#serve-return-values */
    export interface ServeResult {
        port: number
        host: string
    }
    
    export interface TransformOptions extends CommonOptions {
        /** Documentation: https://esbuild.github.io/api/#sourcefile */
        sourcefile?: string
        /** Documentation: https://esbuild.github.io/api/#loader */
        loader?: Loader
        /** Documentation: https://esbuild.github.io/api/#banner */
        banner?: string
        /** Documentation: https://esbuild.github.io/api/#footer */
        footer?: string
    }
    
    export interface TransformResult<ProvidedOptions extends TransformOptions = TransformOptions> {
        code: string
        map: string
        warnings: Message[]
        /** Only when "mangleCache" is present */
        mangleCache: Record<string, string | false> | (ProvidedOptions['mangleCache'] extends Object ? never : undefined)
        /** Only when "legalComments" is "external" */
        legalComments: string | (ProvidedOptions['legalComments'] extends 'external' ? never : undefined)
    }
    
    export interface TransformFailure extends Error {
        errors: Message[]
        warnings: Message[]
    }
    
    export interface Plugin {
        name: string
        setup: (build: PluginBuild) => (void | Promise<void>)
    }
    
    export interface PluginBuild {
        /** Documentation: https://esbuild.github.io/plugins/#build-options */
        initialOptions: BuildOptions
    
        /** Documentation: https://esbuild.github.io/plugins/#resolve */
        resolve(path: string, options?: ResolveOptions): Promise<ResolveResult>
    
        /** Documentation: https://esbuild.github.io/plugins/#on-start */
        onStart(callback: () =>
            (OnStartResult | null | void | Promise<OnStartResult | null | void>)): void
    
        /** Documentation: https://esbuild.github.io/plugins/#on-end */
        onEnd(callback: (result: BuildResult) =>
            (OnEndResult | null | void | Promise<OnEndResult | null | void>)): void
    
        /** Documentation: https://esbuild.github.io/plugins/#on-resolve */
        onResolve(options: OnResolveOptions, callback: (args: OnResolveArgs) =>
            (OnResolveResult | null | undefined | Promise<OnResolveResult | null | undefined>)): void
    
        /** Documentation: https://esbuild.github.io/plugins/#on-load */
        onLoad(options: OnLoadOptions, callback: (args: OnLoadArgs) =>
            (OnLoadResult | null | undefined | Promise<OnLoadResult | null | undefined>)): void
    
        /** Documentation: https://esbuild.github.io/plugins/#on-dispose */
        onDispose(callback: () => void): void
    
        // This is a full copy of the esbuild library in case you need it
        esbuild: {
            context: typeof context,
            build: typeof build,
            buildSync: typeof buildSync,
            transform: typeof transform,
            transformSync: typeof transformSync,
            formatMessages: typeof formatMessages,
            formatMessagesSync: typeof formatMessagesSync,
            analyzeMetafile: typeof analyzeMetafile,
            analyzeMetafileSync: typeof analyzeMetafileSync,
            initialize: typeof initialize,
            version: typeof version,
        }
    }
    
    /** Documentation: https://esbuild.github.io/plugins/#resolve-options */
    export interface ResolveOptions {
        pluginName?: string
        importer?: string
        namespace?: string
        resolveDir?: string
        kind?: ImportKind
        pluginData?: any
        with?: Record<string, string>
    }
    
    /** Documentation: https://esbuild.github.io/plugins/#resolve-results */
    export interface ResolveResult {
        errors: Message[]
        warnings: Message[]
    
        path: string
        external: boolean
        sideEffects: boolean
        namespace: string
        suffix: string
        pluginData: any
    }
    
    export interface OnStartResult {
        errors?: PartialMessage[]
        warnings?: PartialMessage[]
    }
    
    export interface OnEndResult {
        errors?: PartialMessage[]
        warnings?: PartialMessage[]
    }
    
    /** Documentation: https://esbuild.github.io/plugins/#on-resolve-options */
    export interface OnResolveOptions {
        filter: RegExp
        namespace?: string
    }
    
    /** Documentation: https://esbuild.github.io/plugins/#on-resolve-arguments */
    export interface OnResolveArgs {
        path: string
        importer: string
        namespace: string
        resolveDir: string
        kind: ImportKind
        pluginData: any
        with: Record<string, string>
    }
    
    export type ImportKind =
        | 'entry-point'
    
        // JS
        | 'import-statement'
        | 'require-call'
        | 'dynamic-import'
        | 'require-resolve'
    
        // CSS
        | 'import-rule'
        | 'composes-from'
        | 'url-token'
    
    /** Documentation: https://esbuild.github.io/plugins/#on-resolve-results */
    export interface OnResolveResult {
        pluginName?: string
    
        errors?: PartialMessage[]
        warnings?: PartialMessage[]
    
        path?: string
        external?: boolean
        sideEffects?: boolean
        namespace?: string
        suffix?: string
        pluginData?: any
    
        watchFiles?: string[]
        watchDirs?: string[]
    }
    
    /** Documentation: https://esbuild.github.io/plugins/#on-load-options */
    export interface OnLoadOptions {
        filter: RegExp
        namespace?: string
    }
    
    /** Documentation: https://esbuild.github.io/plugins/#on-load-arguments */
    export interface OnLoadArgs {
        path: string
        namespace: string
        suffix: string
        pluginData: any
        with: Record<string, string>
    }
    
    /** Documentation: https://esbuild.github.io/plugins/#on-load-results */
    export interface OnLoadResult {
        pluginName?: string
    
        errors?: PartialMessage[]
        warnings?: PartialMessage[]
    
        contents?: string | Uint8Array
        resolveDir?: string
        loader?: Loader
        pluginData?: any
    
        watchFiles?: string[]
        watchDirs?: string[]
    }
    
    export interface PartialMessage {
        id?: string
        pluginName?: string
        text?: string
        location?: Partial<Location> | null
        notes?: PartialNote[]
        detail?: any
    }
    
    export interface PartialNote {
        text?: string
        location?: Partial<Location> | null
    }
    
    /** Documentation: https://esbuild.github.io/api/#metafile */
    export interface Metafile {
        inputs: {
            [path: string]: {
                bytes: number
                imports: {
                    path: string
                    kind: ImportKind
                    external?: boolean
                    original?: string
                    with?: Record<string, string>
                }[]
                format?: 'cjs' | 'esm'
                with?: Record<string, string>
            }
        }
        outputs: {
            [path: string]: {
                bytes: number
                inputs: {
                    [path: string]: {
                        bytesInOutput: number
                    }
                }
                imports: {
                    path: string
                    kind: ImportKind | 'file-loader'
                    external?: boolean
                }[]
                exports: string[]
                entryPoint?: string
                cssBundle?: string
            }
        }
    }
    
    export interface FormatMessagesOptions {
        kind: 'error' | 'warning'
        color?: boolean
        terminalWidth?: number
    }
    
    export interface AnalyzeMetafileOptions {
        color?: boolean
        verbose?: boolean
    }
    
    export interface WatchOptions {
    }
    
    export interface BuildContext<ProvidedOptions extends BuildOptions = BuildOptions> {
        /** Documentation: https://esbuild.github.io/api/#rebuild */
        rebuild(): Promise<BuildResult<ProvidedOptions>>
    
        /** Documentation: https://esbuild.github.io/api/#watch */
        watch(options?: WatchOptions): Promise<void>
    
        /** Documentation: https://esbuild.github.io/api/#serve */
        serve(options?: ServeOptions): Promise<ServeResult>
    
        cancel(): Promise<void>
        dispose(): Promise<void>
    }
    
    type SameShape<Out, In extends Out> = In & { [Key in Exclude<keyof In, keyof Out>]: never }
    
    /**
        * This function invokes the "esbuild" command-line tool for you. It returns a
        * promise that either resolves with a "BuildResult" object or rejects with a
        * "BuildFailure" object.
        *
        * - Works in node: yes
        * - Works in browser: yes
        *
        * Documentation: https://esbuild.github.io/api/#build
        */
    export function build<T extends BuildOptions>(options: SameShape<BuildOptions, T>): Promise<BuildResult<T>>
    
    /**
        * This is the advanced long-running form of "build" that supports additional
        * features such as watch mode and a local development server.
        *
        * - Works in node: yes
        * - Works in browser: no
        *
        * Documentation: https://esbuild.github.io/api/#build
        */
    export function context<T extends BuildOptions>(options: SameShape<BuildOptions, T>): Promise<BuildContext<T>>
    
    /**
        * This function transforms a single JavaScript file. It can be used to minify
        * JavaScript, convert TypeScript/JSX to JavaScript, or convert newer JavaScript
        * to older JavaScript. It returns a promise that is either resolved with a
        * "TransformResult" object or rejected with a "TransformFailure" object.
        *
        * - Works in node: yes
        * - Works in browser: yes
        *
        * Documentation: https://esbuild.github.io/api/#transform
        */
    export function transform<T extends TransformOptions>(input: string | Uint8Array, options?: SameShape<TransformOptions, T>): Promise<TransformResult<T>>
    
    /**
        * Converts log messages to formatted message strings suitable for printing in
        * the terminal. This allows you to reuse the built-in behavior of esbuild's
        * log message formatter. This is a batch-oriented API for efficiency.
        *
        * - Works in node: yes
        * - Works in browser: yes
        */
    export function formatMessages(messages: PartialMessage[], options: FormatMessagesOptions): Promise<string[]>
    
    /**
        * Pretty-prints an analysis of the metafile JSON to a string. This is just for
        * convenience to be able to match esbuild's pretty-printing exactly. If you want
        * to customize it, you can just inspect the data in the metafile yourself.
        *
        * - Works in node: yes
        * - Works in browser: yes
        *
        * Documentation: https://esbuild.github.io/api/#analyze
        */
    export function analyzeMetafile(metafile: Metafile | string, options?: AnalyzeMetafileOptions): Promise<string>
    
    /**
        * A synchronous version of "build".
        *
        * - Works in node: yes
        * - Works in browser: no
        *
        * Documentation: https://esbuild.github.io/api/#build
        */
    export function buildSync<T extends BuildOptions>(options: SameShape<BuildOptions, T>): BuildResult<T>
    
    /**
        * A synchronous version of "transform".
        *
        * - Works in node: yes
        * - Works in browser: no
        *
        * Documentation: https://esbuild.github.io/api/#transform
        */
    export function transformSync<T extends TransformOptions>(input: string | Uint8Array, options?: SameShape<TransformOptions, T>): TransformResult<T>
    
    /**
        * A synchronous version of "formatMessages".
        *
        * - Works in node: yes
        * - Works in browser: no
        */
    export function formatMessagesSync(messages: PartialMessage[], options: FormatMessagesOptions): string[]
    
    /**
        * A synchronous version of "analyzeMetafile".
        *
        * - Works in node: yes
        * - Works in browser: no
        *
        * Documentation: https://esbuild.github.io/api/#analyze
        */
    export function analyzeMetafileSync(metafile: Metafile | string, options?: AnalyzeMetafileOptions): string
    
    /**
        * This configures the browser-based version of esbuild. It is necessary to
        * call this first and wait for the returned promise to be resolved before
        * making other API calls when using esbuild in the browser.
        *
        * - Works in node: yes
        * - Works in browser: yes ("options" is required)
        *
        * Documentation: https://esbuild.github.io/api/#browser
        */
    export function initialize(options: InitializeOptions): Promise<void>
    
    export interface InitializeOptions {
        /**
            * The URL of the "esbuild.wasm" file. This must be provided when running
            * esbuild in the browser.
            */
        wasmURL?: string | URL
    
        /**
            * The result of calling "new WebAssembly.Module(buffer)" where "buffer"
            * is a typed array or ArrayBuffer containing the binary code of the
            * "esbuild.wasm" file.
            *
            * You can use this as an alternative to "wasmURL" for environments where it's
            * not possible to download the WebAssembly module.
            */
        wasmModule?: WebAssembly.Module
    
        /**
            * By default esbuild runs the WebAssembly-based browser API in a web worker
            * to avoid blocking the UI thread. This can be disabled by setting "worker"
            * to false.
            */
        worker?: boolean
    }
    
    export let version: string
    
    export function stop(): Promise<void>
    
    global {
        namespace WebAssembly {
            interface Module {
            }
        }
        interface URL {
        }
    }
}

declare module 'color-space/node_modules/kleur/colors' {
    function print(input: string | boolean | number): string;
    function print(input: undefined | void): undefined;
    function print(input: null): null;
    type Colorize = typeof print;
    
    export const $: { enabled: boolean };
    
    export const black: Colorize;
    export const red: Colorize;
    export const green: Colorize;
    export const yellow: Colorize;
    export const blue: Colorize;
    export const magenta: Colorize;
    export const cyan: Colorize;
    export const white: Colorize;
    export const gray: Colorize;
    export const grey: Colorize;
    
    export const bgBlack: Colorize;
    export const bgRed: Colorize;
    export const bgGreen: Colorize;
    export const bgYellow: Colorize;
    export const bgBlue: Colorize;
    export const bgMagenta: Colorize;
    export const bgCyan: Colorize;
    export const bgWhite: Colorize;
    
    export const reset: Colorize;
    export const bold: Colorize;
    export const dim: Colorize;
    export const italic: Colorize;
    export const underline: Colorize;
    export const inverse: Colorize;
    export const hidden: Colorize;
    export const strikethrough: Colorize;
}

declare module 'color-space/node_modules/kleur/index' {
    namespace kleur {
        interface Color {
            (x: string | number): string;
            (): Kleur;
        }
    
        interface Kleur {
            // Colors
            black: Color;
            red: Color;
            green: Color;
            yellow: Color;
            blue: Color;
            magenta: Color;
            cyan: Color;
            white: Color;
            gray: Color;
            grey: Color;
    
            // Backgrounds
            bgBlack: Color;
            bgRed: Color;
            bgGreen: Color;
            bgYellow: Color;
            bgBlue: Color;
            bgMagenta: Color;
            bgCyan: Color;
            bgWhite: Color;
    
            // Modifiers
            reset: Color;
            bold: Color;
            dim: Color;
            italic: Color;
            underline: Color;
            inverse: Color;
            hidden: Color;
            strikethrough: Color;
        }
    }
    
    let kleur: kleur.Kleur & { enabled: boolean };
    export = kleur;
}

declare module 'color-space/node_modules/mri/index' {
    type Dict<T> = Record<string, T>;
    type Arrayable<T> = T | T[];
    type Default = Dict<any>;
    
    function mri<T=Default>(args?: string[], options?: mri.Options): mri.Argv<T>;
    
    namespace mri {
        export interface Options {
            boolean?: Arrayable<string>;
            string?: Arrayable<string>;
            alias?: Dict<Arrayable<string>>;
            default?: Dict<any>;
            unknown?(flag: string): void;
        }
    
        export type Argv<T=Default> = T & {
            _: string[];
        }
    }
    
    export = mri;
}

declare module 'color-space/node_modules/sade/index' {
    import type * as mri from 'mri';
    
    type Arrayable<T> = T | T[];
    
    function sade(usage: string, isSingle?: boolean): sade.Sade;
    
    namespace sade {
        export type Handler = (...args: any[]) => any;
        export type Value = number | string | boolean | null;
    
        export interface LazyOutput {
            name: string;
            handler: Handler;
            args: string[];
        }
    
        export interface Sade {
            command(usage: string, description?: string, options?: {
                alias?: Arrayable<string>;
                default?: boolean;
            }): Sade;
    
            option(flag: string, description?: string, value?: Value): Sade;
            action(handler: Handler): Sade;
            describe(text: Arrayable<string>): Sade;
            alias(...names: string[]): Sade;
            example(usage: string): Sade;
    
            parse(arr: string[], opts: { lazy: true } & mri.Options): LazyOutput;
            parse(arr: string[], opts?: { lazy?: boolean } & mri.Options): void;
    
            version(value: string): Sade;
            help(cmd?: string): void;
        }
    }
    
    export = sade;
}

declare module 'color-space/node_modules/uvu/assert/index' {
    type Types = 'string' | 'number' | 'boolean' | 'object' | 'undefined' | 'function';
    
    export type Message = string | Error;
    export function ok(actual: any, msg?: Message): asserts actual;
    export function is(actual: any, expects: any, msg?: Message): void;
    export function equal(actual: any, expects: any, msg?: Message): void;
    export function type(actual: any, expects: Types, msg?: Message): void;
    export function instance(actual: any, expects: any, msg?: Message): void;
    export function snapshot(actual: string, expects: string, msg?: Message): void;
    export function fixture(actual: string, expects: string, msg?: Message): void;
    export function match(actual: string, expects: string | RegExp, msg?: Message): void;
    export function throws(fn: Function, expects?: Message | RegExp | Function, msg?: Message): void;
    export function not(actual: any, msg?: Message): void;
    export function unreachable(msg?: Message): void;
    
    export namespace is {
        function not(actual: any, expects: any, msg?: Message): void;
    }
    
    export namespace not {
        function ok(actual: any, msg?: Message): void;
        function equal(actual: any, expects: any, msg?: Message): void;
        function type(actual: any, expects: Types, msg?: Message): void;
        function instance(actual: any, expects: any, msg?: Message): void;
        function snapshot(actual: string, expects: string, msg?: Message): void;
        function fixture(actual: string, expects: string, msg?: Message): void;
        function match(actual: string, expects: string | RegExp, msg?: Message): void;
        function throws(fn: Function, expects?: Message | RegExp | Function, msg?: Message): void;
    }
    
    export class Assertion extends Error {
        name: 'Assertion';
        code: 'ERR_ASSERTION';
        details: false | string;
        generated: boolean;
        operator: string;
        expects: any;
        actual: any;
        constructor(options?: {
            message: string;
            details?: string;
            generated?: boolean;
            operator: string;
            expects: any;
            actual: any;
        });
    }
}

declare module 'color-space/node_modules/uvu/diff/index' {
    export function chars(input: any, expects: any): string;
    export function lines(input: any, expects: any, linenum?: number): string;
    export function direct(input: any, expects: any, lenA?: number, lenB?: number): string;
    export function compare(input: any, expects: any): string;
    export function arrays(input: any, expects: any): string;
}

declare module 'color-space/node_modules/uvu/index' {
    namespace uvu {
        type Crumbs = { __suite__: string; __test__: string };
        type Callback<T> = (context: T & Crumbs) => Promise<void> | void;
    
        interface Hook<T> {
            (hook: Callback<T>): void;
            each(hook: Callback<T>): void;
        }
    
        interface Test<T> {
            (name: string, test: Callback<T>): void;
            only(name: string, test: Callback<T>): void;
            skip(name?: string, test?: Callback<T>): void;
            before: Hook<T>;
            after: Hook<T>
            run(): () => void;
        }
    }
    
    type Context = Record<string, any>;
    
    export type Test<T=Context> = uvu.Test<T>;
    export type Callback<T=Context> = uvu.Callback<T>;
    
    export const test: uvu.Test<Context>;
    export function suite<T=Context>(title?: string, context?: T): uvu.Test<T>;
    export function exec(bail?: boolean): Promise<void>;
}

declare module 'color-space/node_modules/uvu/parse/index' {
    type Arrayable<T> = T[] | T;
    
    export interface Suite {
        /** The relative file path */
        name: string;
        /** The absolute file path */
        file: string;
    }
    
    export interface Options {
        cwd: string;
        require: Arrayable<string>;
        ignore: Arrayable<string | RegExp>;
    }
    
    export interface Argv {
        dir: string;
        suites: Suite[];
        requires: boolean;
    }
    
    export function parse(dir?: string, pattern?: string|RegExp, opts?: Partial<Options>): Promise<Argv>;
}

declare module 'color-space/node_modules/uvu/run/index' {
    import type { Suite } from 'uvu/parse';
    export function run(suites: Suite[], options?: { bail: boolean }): Promise<void>;
}

